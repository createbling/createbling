<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.createbling.modules.sys.dao.UserDao">
	
	<!-- 注意：user的别名为a -->
	<!-- 通过area_id表明用户归属于哪一层的哪个节点，如果是普通用户，可以做到控制用户节点与节点之间的访问， -->
    <sql id="userColumns">
    	a.id,
    	a.area_id AS "area.id",
    	a.login_name,
    	a.password,
    	a.no,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.description,
		a.login_flag,
		a.photo,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.flag,
		ar.name AS "area.name",
		ar.parent_id AS "area.parent.id",
		ar.parent_ids AS "area.parentIds",
		ar.type AS "area.type"

    </sql>

    
    <sql id="userJoins">
		LEFT JOIN sys_area ar ON ar.id = a.area_id
    </sql>
	
	<!-- 根据编号获得用户 -->
	<select id="get" resultType="User">
		SELECT
			<include refid="userColumns"/><!-- ,
			ro.office_id AS "roleList.officeList.id" -->
		FROM sys_user a
		<include refid="userJoins"/><!-- 
		LEFT JOIN sys_role_office ro ON ro.role_id = r.id -->
		WHERE a.id = #{id}
	</select>
	
	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="User" parameterType="User">
		SELECT
			<include refid="userColumns"/><!-- ,
			ro.office_id AS "roleList.officeList.id" -->
		FROM sys_user a
		<include refid="userJoins"/><!-- 
		LEFT JOIN sys_role_office ro ON ro.role_id = r.id -->
		<!-- 注意：这里原本是a.flag = #{DEL_FLAG_NORMAL} -->
		WHERE a.login_name = #{loginName} AND a.flag = 0
	</select>
	
	<!-- 分页查询用户信息 -->
	<select id="findList" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		<if test="role != null and role.id != null and role.id != ''">
			JOIN sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
		</if>
		WHERE a.flag = #{DEL_FLAG_NORMAL}
		<if test="area != null and area.id != null and area.id != ''">
			AND (o.id = #{area.id} OR ar.parent_ids LIKE 
					<if test="dbName == 'oracle'">'%,'||#{area.id}||',%')</if>
					<if test="dbName == 'mssql'">'%,'+#{area.id}+',%')</if>
					<if test="dbName == 'mysql'">CONCAT('%,', #{area.id}, ',%'))</if>
		</if>
		<!-- 如果不是超级管理员，则不显示超级管理员用户 -->
		<if test="!currentUser.admin">
			AND a.id != '1'
		</if>
		<if test="loginName != null and loginName != ''">
			AND a.login_name like 
					<if test="dbName == 'oracle'">'%'||#{loginName}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{loginName}+'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{loginName}, '%')</if>
		</if>
		<if test="name != null and name != ''">
			AND a.name like 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{name}, '%')</if>
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.name
			</otherwise>
		</choose>
	</select>
	
	<!-- 根据OfficeId获取用户（树查询用户时用） -->
	<select id="findUserByAreaId" resultType="User" useCache="true">
		SELECT
			a.id, a.name, a.login_name
		FROM sys_user a
		WHERE a.flag = #{DEL_FLAG_NORMAL}
			AND a.area_id = #{area.id}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user a
		<include refid="userJoins"/>
		WHERE a.flag = #{DEL_FLAG_NORMAL}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM sys_user a
		WHERE a.flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO sys_user(
			id, 
			area_id, 
			login_name, 
			password, 
			no, 
			name, 
			email, 
			phone, 
			mobile, 
			user_type, 
			create_by, 
			create_date, 
			update_by, 
			update_date, 
			description, 
			login_flag, 
			photo, 
			flag
		) VALUES (
			#{id}, 
			#{area.id}, 
			#{loginName}, 
			#{password}, 
			#{no}, 
			#{name}, 
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{userType}, 
			#{createBy.id}, 
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{description}, 
			#{loginFlag}, 
			#{photo}, 
			#{delFlag}
		)
	</insert>
	
	<!-- 更新用户 -->
	<update id="update">
		UPDATE sys_user SET 
			area_id = #{area.id}, 
			login_name = #{loginName}, 
			password = #{password}, 
			no = #{no}, 
			name = #{name}, 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			user_type = #{userType}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			description = #{description},
			login_flag = #{loginFlag},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM sys_user_role WHERE user_id = #{id}
	</delete>
	
	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO sys_user_role(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id}
			<if test="dbName != 'mssql'">
			FROM dual
			</if>
		</foreach>
	</insert>
	
	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE sys_user SET 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			description = #{description},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE sys_user SET 
			password = #{password} 
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE sys_user SET 
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE sys_user SET 
			flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
<!-- 	<resultMap type="com.createbling.modules.sys.entity.Coordinate" id="coordinate">
	    <constructor>
	        <idArg column="id" javaType="string"/>
	    </constructor>
	</resultMap> -->
	<!-- 找出用户拥有的所有坐标点 -->
<!-- 	<select id="getAllCoordinate" resultType="com.createbling.modules.sys.entity.Coordinate">
	    SELECT 
	        id as id,
	        
	</select> -->
	<!-- 传入的参数应该是该用户所属area的最高父节点ID -->
	<select id="getAllGis" resultType="com.createbling.modules.sys.entity.Gis">
		SELECT
			b.location,
			b.longitude,
			b.latitude,
			b.create_by,
			b.create_date
		FROM sys_user u
		LEFT JOIN sys_area a ON #{id} = a.id
		LEFT JOIN a.type b on b.area_id=a.id
	</select>
	
	<!-- 查询用户在area上的所有父节点,使用join而不使用where字句的原因在于，用户可能拥有多个area_id -->
	<select id="getAreaParentIds" resultType="string">
	    SELECT 
	        a.parent_ids
	    FROM sys_user u
	    LEFT JOIN sys_user_role ur ON ur.user_id=u.id
	    LEFT JOIN sys_role r ON r.id=ur.role_id
	    LEFT JOIN sys_area a ON a.id=r.area_id
	</select>	
</mapper>