<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.createbling.modules.sys.dao.RoleDao">
<resultMap id="roleResult" type="Role">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="enname" column="enname" />
		<result property="roleType" column="roleType" />
		<result property="dataScope" column="dataScope" />
		<result property="remarks" column="remarks" />
		<result property="useable" column="useable" />
		<result property="sysData" column="sysData" /><!-- 
		<collection property="userList" ofType="User">
			<id property="id" column="userList.id" />
			<id property="loginName" column="userList.loginName" />
			<id property="name" column="userList.name" />
			<id property="email" column="userList.email" />
			<id property="phone" column="userList.phone" />
			<id property="mobile" column="userList.mobile" />
			<id property="area.name" column="userList.area.name" />
			<id property="company.name" column="userList.company.name" />
		</collection> -->
		<collection property="menuList" ofType="Menu">
			<id property="id" column="menuList.id" />
		</collection>
		<!-- 表明归属于哪个机构 -->
		<collection property="areaList" ofType="Area">
			<id property="id" column="areaList.id" />
		</collection>
	</resultMap>
	
	
	<!-- 这里面role是a, area是o -->
    <sql id="roleColumns">
    	a.id,
    	a.area_id AS "area.id",
    	a.name,
    	a.enname,
    	a.role_type AS roleType,
		a.data_scope AS dataScope,
		a.remarks,
		a.create_by AS "createBy.id",
		a.create_date,
		a.update_by AS "updateBy.id",
		a.update_date,
		a.flag,
    	o.name AS "area.name",
    	<!-- 除掉了o.code, -->
    	a.useable AS useable,
    	a.is_sys AS sysData
    </sql>
    
	<select id="get" resultMap="roleResult">
		SELECT
			<include refid="roleColumns"/>,<!-- 
			ur.user_id AS "userList.id",
			u.login_name AS "userList.loginName",
			u.name AS "userList.name",
			u.email AS "userList.email",
			u.phone AS "userList.phone",
			u.mobile AS "userList.mobile",
			uc.name AS "userList.company.name",
			uo.name AS "userList.area.name", -->
			rm.menu_id AS "menuList.id",
			ro.area_id AS "areaList.id"
		FROM sys_role a
		JOIN sys_area o ON o.id = a.area_id<!-- 
		LEFT JOIN sys_user_role ur ON ur.role_id = a.id
		LEFT JOIN sys_user u ON u.id = ur.user_id
		LEFT JOIN sys_area uc ON uc.id = u.company_id
		LEFT JOIN sys_area uo ON uo.id = u.area_id -->
		LEFT JOIN sys_role_menu rm ON rm.role_id = a.id
		LEFT JOIN sys_role_area ro ON ro.role_id = a.id
		WHERE a.id = #{id}
	</select>
	
	<select id="getByName" resultType="Role">
		SELECT
			<include refid="roleColumns"/>
		FROM sys_role a
		JOIN sys_area o ON o.id = a.area_id
		WHERE a.name = #{name} AND a.flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<select id="getByEnname" resultType="Role">
		SELECT
			<include refid="roleColumns"/>
		FROM sys_role a
		JOIN sys_area o ON o.id = a.area_id
		WHERE a.enname = #{enname} AND a.flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<select id="findList" resultMap="roleResult">
		SELECT <!-- DISTINCT -->
			<include refid="roleColumns"/>,
			ro.area_id AS "areaList.id"
		FROM sys_role a
		<!-- 首先将role表与area表进行连接，找出role对应的area，因为role是归属于某个area的 -->
		LEFT JOIN sys_area o ON o.id = a.area_id
		<!-- 然后将用户角色表进行连接，找出该角色所有用户-角色相关信息 -->
		LEFT JOIN sys_user_role ur ON ur.role_id = a.id
		<!-- 连接用户表，找出用户详细信息 -->
		LEFT JOIN sys_user u ON u.id = ur.user_id
		<!-- 将角色与area相连接，找出角色所对应的area -->
		LEFT JOIN sys_role_area ro ON ro.role_id = a.id
		<!-- chauncy这里原先是a.flag = #{DEL_FLAG_NORMAL} -->
		<!-- chauncy这里原先是a.useable=#{useable} -->
		WHERE a.flag = 0 AND a.useable= 1
		<if test="user != null and user.id != null and user.id != ''">
			AND u.id = #{user.id}
		</if>
		<if test="user != null and user.loginName != null and user.loginName != ''">
			AND u.login_name = #{user.loginName}
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<!-- chauncy去掉了o.code -->
		ORDER BY a.name
	</select>
	
	<select id="findAllList" resultType="Role">
		SELECT
			<include refid="roleColumns"/>
		FROM sys_role a
		<!-- 找出角色对应的area即可 -->
		LEFT JOIN sys_area o ON o.id = a.area_id
		WHERE a.flag = #{DEL_FLAG_NORMAL}
		<!-- chauncy去掉了o.code -->
		ORDER BY a.name
	</select>
	
	<insert id="insert">
		INSERT INTO sys_role(
			id, 
			area_id, 
			name, 
			enname, 
			role_type, 
			data_scope, 
			create_by, 
			create_date, 
			update_by, 
			update_date, 
			remarks, 
			flag,
			is_sys,
			useable
		) VALUES (
			#{id}, 
			#{area.id}, 
			#{name}, 
			#{enname}, 
			#{roleType}, 
			#{dataScope}, 
			#{createBy.id}, 
			#{createDate}, 
			#{updateBy.id}, 
			#{updateDate}, 
			#{remarks}, 
			#{delFlag},
			#{sysData},
			#{useable}
		)
	</insert>
	
	<update id="update">
		UPDATE sys_role SET 
			area_id = #{area.id}, 
			name = #{name}, 
			enname = #{enname}, 
			role_type = #{roleType}, 
			data_scope = #{dataScope}, 
			update_by = #{updateBy.id}, 
			update_date = #{updateDate}, 
			remarks = #{remarks},
			is_sys = #{sysData},
			useable = #{useable}
		WHERE id = #{id}
	</update>
	
	<delete id="deleteRoleMenu">
		DELETE FROM sys_role_menu WHERE role_id = #{id}
	</delete>
	
	<insert id="insertRoleMenu">
		INSERT INTO sys_role_menu(role_id, menu_id)
		<foreach collection="menuList" item="menu" separator=" union all ">
			SELECT #{id}, #{menu.id}
			<if test="dbName != 'mssql'">
			FROM dual
			</if>
		</foreach>
	</insert>
	
	<delete id="deleteRoleArea">
		DELETE FROM sys_role_area WHERE role_id = #{id}
	</delete>
	
	<insert id="insertRoleArea">
		INSERT INTO sys_role_area(role_id, area_id)
		<foreach collection="areaList" item="area" separator=" union all ">
			SELECT #{id}, #{area.id}
			<if test="dbName != 'mssql'">
			FROM dual
			</if>
		</foreach>
	</insert>
	
	<update id="delete">
		UPDATE sys_role SET 
			flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>